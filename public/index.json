[{"categories":["Leetcode"],"content":"Problem statement: Assume you have a method which checks if one word is a substring of another. Given two strings, write code to check if the latter is a rotation of the former using only one call to the aforementioned method. This one is super straightforward once you know the trick. If you take the original string and concatenate it with itself, then all of the string’s rotations will be included in the concatenation. Thus, it will then suffice to simply use the method to check if the word is a substring of another and, if it is, then it must be a rotation. Note that we must check the length because rotation preserves the length. import unittest from dataclasses import dataclass class RotationChecker(): def check(self, s: str, t: str) -\u003e bool: if len(s) == len(t) != 0: return t in s+s return False class TestRotationChecker(unittest.TestCase): def test_check(self): @dataclass class TestCase: name: str given1: str given2: str expected: bool test_cases = [ TestCase(name=\"correctly identifies rotation\", given1=\"waterbottle\", given2=\"erbottlewat\", expected=True), TestCase(name=\"correctly identifies not being a rotation\", given1=\"waterbottle\", given2=\"rebottlewat\", expected=False), ] checker = RotationChecker() for tc in test_cases: res = checker.check(tc.given1, tc.given2) self.assertEqual(res, tc.expected, f\"[{tc.name}] - expected {tc.expected}, but got {res}\") if __name__ == \"__main__\": unittest.main() ","date":"2025-01-27","objectID":"/string_rotation/:0:0","tags":null,"title":"Leetcode 6: String rotation","uri":"/string_rotation/"},{"categories":["Leetcode"],"content":"Problem statement: Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. If the compressed string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters. To solve this we need to iterate over each character in the string and, for each character we are currently looking at, we need to check if the previous character is the same while keeping count of how many equal characters we have already seen. Then we just need to verify if our compression is smaller than the given input and we are done. import unittest from dataclasses import dataclass class Compressor(): def run(self, text: str) -\u003e str: compressed = list() count = 0 for i in range(len(text)): if i != 0 and text[i] != text[i-1]: compressed.append(f\"{text[i-1]}{count}\") count = 0 count += 1 if text != \"\": compressed.append(f\"{text[-1]}{count}\") return min(''.join(compressed), text, key=len) class TestCompressor(unittest.TestCase): def test_run(self): @dataclass class TestCase: name: str input: str expected: str test_cases = [ TestCase(name=\"compresses large string\", input=\"aaabbcaaaa\", expected=\"a3b2c1a4\"), TestCase(name=\"returns original if original is smaller\", input=\"abcdefg\", expected=\"abcdefg\"), TestCase(name=\"works for empty string\", input=\"\", expected=\"\") ] compressor = Compressor() for tc in test_cases: res = compressor.run(tc.input) self.assertEqual(tc.expected, res, f\"[{tc.name}] - expected {tc.expected}, but got {res}\") if __name__ == \"__main__\": unittest.main() ","date":"2025-01-27","objectID":"/string_compression/:0:0","tags":null,"title":"Leetcode 5: String compression","uri":"/string_compression/"},{"categories":["Leetcode"],"content":"Problem statement: there are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away. This one is very easy to solve. We simply get the frequency counts of the characters in both strings and subtract them, and then count how many keys we get whose value is not zero, since that corresponds to the number of edits. import unittest from collections import Counter from dataclasses import dataclass class EditChecker(): def is_one_edit_away(self, s, t): c = Counter(s) c.subtract(t) num_edits = sum(1 for val in c.values() if val != 0) return True if num_edits \u003c= 1 else False class TestEditChecker(unittest.TestCase): def test_one_edit_away(self): @dataclass class TestCase: name: str str1: str str2: str expected: bool test_cases = [ TestCase(name=\"one operation away\", str1=\"asdf\", str2=\"asdfg\", expected=True), TestCase(name=\"zero operations away\", str1=\"asdf\", str2=\"asdf\", expected=True), TestCase(name=\"works for empty strings\", str1=\"\", str2=\"\", expected=True), TestCase(name=\"works for random characters\", str1=\"123 -kj\", str2=\"12 -kj\", expected=True), TestCase(name=\"one edit and one add away\", str1=\"asdf\", str2=\"sdt\", expected=False), TestCase(name=\"two adds away\", str1=\"asdf\", str2=\"asdfgh\", expected=False), ] checker = EditChecker() for tc in test_cases: res = checker.is_one_edit_away(tc.str1, tc.str2) self.assertEqual(res, tc.expected, msg=f\"[{tc.name}] - expected {tc.expected}, but got {res}\") if __name__ == \"__main__\": unittest.main() ","date":"2025-01-27","objectID":"/one_edit_away/:0:0","tags":null,"title":"Leetcode 4: One edit away","uri":"/one_edit_away/"},{"categories":["Leetcode"],"content":"Problem statement: given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or a phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. You can ignore casing and non-letter characters. This is a nice exercise because it feels complex but is extremelly straight forward once we think about what we are being asked to do. Basically, we just want to if, if we move the letters around freely, we can get a palindrome. Rather than generate all possible permutations, we can simply notice that a palindrome, like all other words, either has an even or an odd number of characters. Moreover, if it has an even number of characters, then all characters must happen an even number of times. If it has an odd number of characters, then we can only have at most one character with odd number of occurrences. So essentially this problem boils down to a frequency count once again. Then count how many of the counts are odd and, if this number is greater than 1, then there is no palindrome permutation. Otherwise, there is at least one palindrome permutation. import unittest from collections import Counter from dataclasses import dataclass class PalindromeChecker(): def check(self, text: str) -\u003e bool: counts = Counter(text.lower()) number_odd_occurrences = sum(count%2 for count in counts.values()) return True if number_odd_occurrences \u003c= 1 else False class TestPalindromeChecker(unittest.TestCase): def test_check(self): @dataclass class Testcase: name: str input: str expected: bool test_cases = [ Testcase(name=\"all characters are different\", input=\"asdfg\", expected=False), Testcase(name=\"empty string\", input=\"\", expected=True), Testcase(name=\"ignores casing\", input=\"A1kj1Ka\", expected=True), ] checker = PalindromeChecker() for tc in test_cases: res = checker.check(tc.input) self.assertEqual(tc.expected, res, f\"[{tc.name}] - expected {tc.expected}, but got {res}\") if __name__ == \"__main__\": unittest.main() ","date":"2025-01-26","objectID":"/palindrome_permutation/:0:0","tags":null,"title":"Leetcode 3: Palindrome permutation","uri":"/palindrome_permutation/"},{"categories":["Leetcode"],"content":"The first problem I did was pretty simple so lets see if the second one is a bit more interesting. Problem statement: given two strings, write a method to decide if one is a permutation of the other. The first thing to understand is what would classify the strings as being a permutation of one another. Sure we could generate all permutations and check them all, but that would be horribly inefficient and not particularly easier to code. For a string to be a permutation of another they both must have the same characters and they must show up in equal number. This means that all we have to do is get the frequency counts of each string and check if these match. For that purpose we can use a dictionary. However, since this is such a common thing, Python already provides a class designed for such situations, the Counter. We use it to get the frequency counts of the first string, then we use its method subtract to subtract the frequency counts of the second string. Now, if there are any new keys after subtracting, then the strings had different characters and are not palindromes. If the total sum on frequency counts isn’t zero, then it means the strings have the same characters but they show up in different numbers. Putting this together into code and throwing some unit tests in there, we get the following script. import unittest from collections import Counter from dataclasses import dataclass class PermutationChecker(): def check(self, string_1: str, string_2: str) -\u003e bool: character_counts = Counter(string_1) pre_num_chars = len(character_counts) character_counts.subtract(string_2) post_num_chars = len(character_counts) has_same_characters = pre_num_chars == post_num_chars has_same_character_count = character_counts.total() == 0 return True if (has_same_characters and has_same_character_count) else False class TestPermutationChecker(unittest.TestCase): def test_check(self): @dataclass class TestCase: name: str str1: str str2: str expected: bool test_cases = [TestCase(name=\"permutation with just letters\", str1=\"abcd\", str2=\"bacd\", expected=True), TestCase(name=\"permutation with just numbers\", str1=\"3563476\", str2=\"7334566\", expected=True), TestCase(name=\"permutation with alphanumeric\", str1=\"wef34f\", str2=\"wffe34\", expected=True), TestCase(name=\"not a permutation because of different length\", str1=\"abcd\", str2=\"d2cba\", expected=False), TestCase(name=\"not a permutation because of different characters\", str1=\"2354\", str2=\"1234\", expected=False)] checker = PermutationChecker() for tc in test_cases: res = checker.check(tc.str1, tc.str2) self.assertEqual(tc.expected, res, f\"[{tc.name}] - expected {tc.expected} but got {res}\") if __name__ == '__main__': unittest.main() ","date":"2025-01-26","objectID":"/check_permutation/:0:0","tags":null,"title":"Leetcode 2: Check permutation","uri":"/check_permutation/"},{"categories":null,"content":"Hi, I’m Luís! ","date":"2025-01-25","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Work I currently work as a Software Engineer for Stripe. Previously I worked as a Systems Engineer for Cloudflare and before that I worked for freiheit.com technologies as a Software Engineer. ","date":"2025-01-25","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Academic studies I have a BSc in Engineering Physics and a MSc in Applied Mathematics, both granted by University of Lisbon - Instituto Superior Técnico. ","date":"2025-01-25","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":["Leetcode"],"content":"The company I work for decided to do layoffs and fortunately I was not impacted. However, it did get me thinking on whether or not I felt ready to interview with other companies in case I had been fired. And I honestly don’t feel that ready. As such, I bought the Cracking the Coding Interview book and I’m going to be solving every single question that is in the book. Worst case scenario, I’ll learn some new stuff, which isn’t that bad. Plus, I’ll get to refresh my Python knowledge, which is always nice. Okay, first exercise here we go! Problem statement: implement an algorithm to determine if a string has all unique characters. Side note: this is called a heterogram. This is fairly straightforward to solve, all I need to do is iterate over the characters in the string while keeping a ledger of the characters I’ve already seen. I’ll also sprinkle in some nicely formatted unit tests just for good measure. To ensure that this ledger is efficient for lookups (since we’ll have to check every character against it), we use a hashmap to have constant time access. import unittest from dataclasses import dataclass class HeterogramChecker(): def check(self, text): seen = {} for c in text: if c in seen: return False else: seen[c] = True return True class TestHeterogramChecker(unittest.TestCase): def test_check(self): @dataclass class TestCase: name: str input: str expected: bool test_cases = [ TestCase(name=\"heterogram with just letters\", input=\"abcd\", expected=True), TestCase(name=\"heterogram with letters and number\", input=\"s4fad\", expected=True), TestCase(name=\"empty string\", input=\"\", expected=True), TestCase(name=\"repeated number in string\", input=\"23ds2\", expected=False), TestCase(name=\"several repeated characters in string\", input=\"hb 627jh=j ()\", expected=False)] checker = HeterogramChecker() for tc in test_cases: res = checker.check(text=tc.input) self.assertEqual( res, tc.expected, msg=f\"[{tc.name}] expected {tc.expected}, but got {res}\") if __name__ == \"__main__\": unittest.main() ","date":"2025-01-25","objectID":"/is_unique/:0:0","tags":null,"title":"Leetcode 1: Is unique?","uri":"/is_unique/"}]